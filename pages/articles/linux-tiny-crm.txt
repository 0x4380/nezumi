====== linux-tiny-crm ======
<sub>{{linux-tiny-crm.odt|Original file}}</sub>

====== особенности дизассемблирования под LINUX\\ на примере tiny-crackme ======

крис касперски ака мыщъх, noemail

**дизассемблирование под ****LINUX**** имеет свою специфику и свои тонкости, не освященные в доступной литературе и остающиеся под властью тьмы. между тем, защитные механизмы не спят, становясь все сильнее и сильнее. чтобы выиграть в этой битве необходимо не только крепко держать дизассемблер в руках, но и уметь с ним обращаться.**

===== введение =====

Главной особенностью дизассемблирования под LINUX является полное отсутствие достойных дизассемблеров (кроме IDAPRO, конечно) и другого инструментария. Поэтому, даже простая защита ставит хакеров в тупик. На самом деле это не тупик, а хитро замаскированный лаз, ведущий в хату чувака Кролика. Ну, а там где есть Кролик, обязательно найдется и мыщъх (по-испански raton), показывающий как эту штуку взломать.

{{linux-tiny-crm_Image_0.jpg}}

Рисунок 1 чувак кролик

Вот и сейчас он сидит в своей норке и топчет клавиатуру, намериваясь продемонстрировать технику дизассемблирования под LINUX на примере yanisto's tiny crackme, который можно скачать с хорошего немецкого сайта http://www.crackmes.de/users/yanisto/tiny_crackme/. Бесплатно, разумеется. Тут собрана целая коллекция crackme разных уровней сложности и постоянно появляются новые с краткой информацией о них. В частности, описание нашего выглядит так:

It has a very small size (< 400 bytes of bytecode) but implements a few tricks all the same :

//имеет очень малый размер (<400 байт байткода), но все-таки реализует некоторые трики://

- Elf headers corrupted,- //разрушенный//// ELF-////заголовок////;//

- "Ciphered" binary,- //крипиованный////бинарник//

- CRC checking,- //подсчет//// CRC//

- Anti ptrace,- //анти ptrace//

- Anti gdb.- //анти//// gdb//

Difficulty: 3 - Getting harder//сложность:3 - ("становись сильнее")//

Platform: Unix/linux etc.//платформа:////UNIX/////////LINUX//

Language: Assembler//языкассемблер//

Вот его-то мы и будем пытать! В принципе, можно не мучаться, а заглянуть в одно из готовых решений (солюшенов), представленных на сайте, но это нечестно, да и неинтересно. Крякмисов под LINUX совсем немного, хороших крякмисов — еще меньше, и каждый смакуется как вобла с пивом до последнего ребрышка!

Нашим основным инструментом будет IDA PRO, однако, мы так же покажем, как взломать программу с помощью обычного hex-редактора типа HIEW'а, но это будет потом, а пока же откроем пиво и, вставив диск с "Крематорием" в дисковод, наберем в командной строке "$./tiny-crackme".

{{linux-tiny-crm_Image_1.png}}

Рисунок 2 скачиваем tiny-crackme

===== исследование tiny-crackme извне и изнутри =====

Сразу же после запуска крякмиса на экране появляется короткая заставка и строка "enterpassword", ожидающая пароля. Вводим что-нибудь наугад (например, "KPNC") и, естественно, получаем "Wrongpassword, sorry…".

{{linux-tiny-crm_Image_2.png}}

Рисунок 3 tiny-crackme, запрашивающий пароль

Password:

root@6[~]# cd /home/kpnc/hack

root@6[hack]# ./tiny-crackme

 Tiny_crackme - nisto's crackme #2

 ---------------------------------

This one has a particularly small size...

Hope u'll get some fun with it.

You can join me at yanisto@nuxed.org or on #secdev@freenode.net

Enter the Password :  KPNC

 Wrong password, sorry...

Листинг 1 реакция tiny-crackme на неправильный пароль

Дальше гадать бессмысленно, надо ломать. Загружаем файл в свой любимый gdb ("$gdb tiny-crackme"), но… не тут-то было! Отладчик, грязно ругается, отказываясь признавать tiny-crackme исполняемым файлом (см. рис. 4). Что за чертовщина! Ведь мы же его только что запускали и он вполне нормально исполнялся. Ладно, берем objdump и расчехляем дизассемблер ("$objdump -D tiny-crackme"), но... он тоже не может распознать формат файла и с позором убегает.

{{linux-tiny-crm_Image_3.png}}

Рисунок 4 tiny-crackme не отлаживается gdb и не дизассемблируется objdum'ом

GNU gdb 6.1-debian

Copyright 2004 Free Software Foundation, Inc.

GDB is free software, covered by the GNU General Public License, and you are

welcome to change it and/or distribute copies of it under certain conditions.

Type "show copying" to see the conditions.

There is absolutely no warranty for GDB.  Type "show warranty" for details.

This GDB was configured as "i386-linux"..."/home/kpnc/hack/tiny-crackme": not in executable format: File format not recognized

Листинг 2 попытка отладки tiny-crackme с помощью gdb и ее результаты

root@5[hack]# objdump -D tiny-crackme

objdump: tiny-crackme: File format not recognized

Листинг 3 реакция objdump на tiny-crackme

Почему так происходит? Да потому что ELF-заголовок искажен, а штатные средства LINUX'а таких шуток не понимают, вот и отказываются работать с ним. Пусть после этого кто-нибудь скажет, что UNIX - это хакерская ось! Ранние версии IDA вели себя точно так же, но в последнее время ELF-загрузчик был доработан и теперь мы можем дизассемблировать даже извращенные файлы. IDA жутко ругается: theELFheaderentrysizeisinvalid (поле размера ELF-заголовка неверно), theSHTentrysizeisinvalid (поле размера заголовка таблицы секций неверно); SHTtablesizeoroffsetisinvalid (размер заголовка таблицы секций или ее смещение неверно), filecontainsmeaningless/illegalsectiondeclarations, usingprogramsections (файл содержит бессмысленные/неверные объявления секций, поэтому будут использоваться программные секции, они же сегменты), но все-таки открывает его и даже начинает дизассемблировать, что очень хорошо!

Экран дизассемблера должен выглядеть приблизительно так:

LOAD:00200000 ; Segment type: Pure code

LOAD:00200000 ; Segment permissions: Read/Write/Execute

LOAD:00200008 startproc near

LOAD:00200008movbl, 2Ah; заслать в регистр BL значение 2Ah

LOAD:0020000Ajmploc_200040; прыгнутьна loc_200040

LOAD:0020000A

LOAD:0020000Falign 10h; мусор какой-то

LOAD:00200010dd 30002h,1,200008h,20h,1,0,200000h,1,2 dup(31Bh), 7, 1000h

LOAD:00200040

LOAD:00200040 loc_200040:; CODE XREF: start+2j

LOAD:00200040jmploc_200046; переход на loc_200046

LLOAD:00200045db 0B0h; мусорный байт

LOAD:00200046 loc_200046:; CODE XREF: start:loc_200040j

LOAD:00200046callsub_2002F0; вызовфункции sub_2002F0

LOAD:0020004B

LOAD:0020004B loc_20004B:; DATA XREF: sub_2002F0+1o

LOAD:0020004Bdececx; \ 

LOAD:0020004Cout55h, eax;  + LINUX не позволяет обращаться

LOAD:0020004Epopds;  + к портам с прикладного уровня

LOAD:0020004Ficebp;  + значит, это шифрованный код

LOAD:00200050retn3FA0h; /

LOAD:00200050 startendp ; sp=  4

LOAD:00200050

LOAD:00200050 ;────────────────────────────────────────────────────────────────

LOAD:00200053dd 0D49579F1h, 0AD41F2F3h, 0D75459F3h, 3F547BA8h, 1F55E748h

LOAD:00200053dd 3FA0C3F1h, 17BC79F1h, 875479F3h, 3F5479EBh, 0F1DDB0C0h

…\/

… - много-много зашифрованных байт  -

…/\

LOAD:00200053dd 0E0EDBA78h, 0FE5479F3h, 37EA7B18h, 925459F1h, 0C4B6BAF0h

LOAD:002002EFdb 23h

LOAD:002002F0

LOAD:002002F0 sub_2002F0 proc near; CODE XREF: start:loc_200046p

LOAD:002002F0nop; **__процедура расшифровщика__**

LOAD:002002F1moveax, offsetloc_20004B; начало шифроблока

LOAD:002002F6movesi, eax; устанавливаем источник на начало

LOAD:002002F8movedi, esi; устанавливаем приемник на начало

LOAD:002002FAmovecx, 2A5h; длина шифроблока в байтах

LOAD:002002FFshrecx, 2; переводим байты в двойные слова

LOAD:00200302

LOAD:00200302 loc_200302:; CODE XREF: sub_2002F0+19j

LOAD:00200302lodsd; извлекает очередное дв. слово

LOAD:00200303xoreax, 3F5479F1h; шифруем его

LOAD:00200308stosd; кладем обратно

LOAD:00200309looploc_200302; мотаем цикл расшифровки

LOAD:0020030Bretn; выходим из процедуры

LOAD:0020030B sub_2002F0endp

Листинг 4 "сырой" дизассемблированный код tiny-crackme

Точка входа (start), расположенная по адресу 200008h, выглядит нетипично и сразу же притягивает к себе внимание. Нормальные ELF-файлы начинаются с адреса 08048000h или около того (см. статью "секреты покорения эльфов"), а этот… разлегся понимаешь, в области стека и лежит себе. Ну и пускай лежит! Он же никому не мешает! Такой прием вполне законен и все нормально работает. Отладчики это, похоже, ничуть не смущает, да и дизассемблеры тоже. Это совсем не антиотладочный прием, а просто хитрый выкрутас хакера типа "выпендреж". Ладно, идем дальше.

Выполнение программы начинается с команды "mov bl,2A", загоняющий в регистр BL значение 2Ah. Нигде по ходу программы оно не используется, так что это явный мусор. Или… все-таки нет? В ASCII-представлении команда выглядит как "│*" (мячик отскакивающей от стены?) и возможно внесена умышлено, но вот расшифровать ее смысл (если, конечно, допустить, что он есть) мыщъху так и не удалось, поэтому он (и мы вместе с ним) через серию прыжков типа jmp loc_200040  jmploc_200046  call sub_2002F0 добирается до "заветной" процедуры sub_2002F0. Это практически единственная процедура в программе, а все остальное содержимое, как легко видеть, зашифровано. Логично предположить, что это и есть расшифровщик!

Расшифровка кода в дизассемблере всегда представляла большую проблему. Дизассемблер не может дизассемблировать упакованный/зашифрованный код и его надо как-то расшифровать. А как это сделать? Одни хакеры предпочитают снимать с работающей программы дамп, другие — создают специальный скрипт, расшифровывающий файл прямо в дизассемблере. Первый путь проще, второй — надежнее. Если программа использует различные антиотладочные приемы, она сможет подсунуть нам испорченный дамп, если вообще позволит дотронуться до него. Лучше расшифруем программу вручную, заодно познакомившись со скриптами IDAPro, но для этого нам потребуется проанализировать алгоритм работы процедуры расшифровщики. Это легко!

Команда "moveax, offsetloc_20004B" в строке 002002F1h загружает в регистр EAX указатель на начало зашифрованного блока, а команда "mov ecx, 2A5h" задает количество обрабатываемых байт, которое тут же делиться на четыре (сдвиг на две позиции вправо эквивалентен делению на четыре, т. к. 2**2 = 4), поскольку расшифровка идет двойными словами. Цикл расшифровки предельно стандартен и тривиален: lodsd/xoreax, 3F5479F1h/stosd/loop (грузим в EAX очередное двойное слово/делаем ему XOR/сохраняем результат/мотаем цикл). Как это может работать?! Любой программист знает, что в LINUX'е сегмент кода доступен только на исполнение (чтение) и любая попытка записи приводит к аварийному завершению приложения. На самом деле это отнюдь не ограничение системы, а… всего лишь атрибуты кодового сегмента, назначаемые линкером по умолчанию. В данном случае, выставлены все три атрибута — чтение/запись/исполнение, о чем информирует нас IDA в первой строке (Segment permissions: Read/Write/Execute). Имейте это ввиду, при создании собственных защитных механизмов!

Чтобы расшифровать программу, необходимо поксорить блок от 20004Bh до (020004Bh+2A5h) константой 3F5479F1h. Нажимаем <Shift-F2> и в появившемся диалоговом окне вводим следующий скрипт:

autoa, x;// объявляем переменные (тип auto)

for (a = 0x20004B; a < (0x20024B+0x2A5);)

{// мотаем цикл

x = Dword(a);// берем очередное двойное слово по адресу a

x = x ^ 0x3F5479F1;// расшифровываем его

PatchDword(a,x);// патчим образ загруженного файла (не сам файл)

a = a + 4;// модифицируем счетчик цикла (IDA не поддерживает a+=4)

}

Листинг 5 IDA-скрипт, автоматически снимающий шифровку

{{linux-tiny-crm_Image_4.png}}

Рисунок 5 последняя проверка скрипта перед передачей на выполнение

Если скпипт написан без ошибок, то нажатие <Ctrl-Enter> приведет к его выполнению и расшифрует весь код. Кстати говоря, создатель крякмися допустил некритическую ошибку и расшифровал на два байта больше положенного, в результате чего угробил начало расшифровщика, к тому моменту уже отработавшее как первая ступень ракеты и никак не препятствующее нормальному выполнению программы:

LOAD:002002F0sub_2002F0proc near ; CODE XREF: start:loc_200046↑p

LOAD:002002F0jmpnearptr 202077E1h; угробленная команда

LOAD:002002F1inal, dx; угробленная команда

Листинг 6 процедура расшифровки, пожирающая сама себя

Теперь, когда весь код расшифрован, мы можем продолжить его анализ. Возвращаемся к месту вызова процедуры расшифровщика call sub_2002F0, расположенной по адресу 00200046h. Мы видим полную фигню: 

**LOAD****:00200046****call********sub****_2002****F****0; процедура расшифровки**

LOAD:0020004BB8moveax, 20019Eh; заслать в eax число 20019Eh

LOAD:0020004C 9E 01sahf; \

LOAD:0020004E 20and[eax], al;  + - бессмысленный мусор

LOAD:0020004F 00add[ebx+0F4h], bh; /

Листинг 7 внешний вид дизассемблера после распаковки

Кодвыглядитполнойбессмыслицей. Какие тут еще sahf, and и add? Но это еще что! Присмотревшись повнимательнее (Options-> Textrepresentation -> Number of opcode bytes - >4), мы обнаруживаем, инструкции MOV EAX,2019Eh соответствует… однобайтовый код B8h (во всяком случае, IDA Pro уверяет нас так), чего никак не может быть! В действительности, это всего лишь багофича ИДЫ, не обновившей дизассемблерный листинг после расшифровки. Подгоняем курсор к строке 20004Bh и нажимаем <U>, чтобы перевести его в неопределенную (undefined) форму. Тоже самое необходимо проделать и с массивом байт, начинающимся со строки 00200053h(см. листинг 4). Но это еще не все! Ведь после расшифровки этот массив стал частью нашей процедуры, а IDA ошибочно оборвала функцию на адресе 200050h, влепив сюда "endp" (endofprocedure). Чтобы восстановить статус-кво, необходимо подогнать курсор к концу массива и нажать <E> (Edit->Functions->SetFunctionEnd). После этого можно вернуться в начало строки 20004Bh и нажать "C", чтобы превратить неопределенные байты в CODE.

Вот как будет выглядеть экран дизассемблера:

LOAD:0020004B loc_20004B:; DATA XREF: sub_2002F0+1o

LOAD:0020004Bmoveax, 20019Eh; начало нового шифроблока

LOAD:00200050movebx, 0F4h; длина шифроблока в байтах

LOAD:00200055shrebx, 2; переводим байты в двойные слова

LOAD:00200058movedx, dword_200292; "волшебная" константа 0BEEFC0DAh

LOAD:0020005Ecallloc_2002BC; вызов layer-2 расшифровщика

LOAD:00200063movecx, offset unk_20019E; указательна ASCII-строку

LOAD:00200068movedx, 0F4h; длина строки

LOAD:0020006Dcallloc_20029A; вывод строки на экран

LOAD:00200072moveax, 1Ah; \ 

LOAD:00200077xorecx, ecx;  + антиотладка, основанная на

LOAD:00200079movesi, ecx;  + нерентабельности ptrace

LOAD:0020007Bmovedx, 1; /

LOAD:00200080int80h; LINUX - sys_ptrace

LOAD:00200082subebx, eax; анализ кода возврата 

LOAD:00200084testeax, eax; проверка на наличие отладчика

LOAD:00200086jzshortloc_200099; -> отладчик не обнаружен

LOAD:00200088movecx, offset aSorryButThePro

LOAD:0020008Dmovdl, 34h; отладчик обнаружен, материмся

LOAD:0020008Fcallloc_20029A; вывод ругательного сообщения

LOAD:00200094jmploc_20030; -> завершение программы

LOAD:00200094

LOAD:00200099 loc_200099:; CODE XREF: start+7Ej

LOAD:00200099jmpshort loc_20009C; прыжокна loc_20009C

LOAD:00200099

LOAD:0020009Bdb 0B0h ;░; мусорныйбайт

LOAD:0020009C

LOAD:0020009C loc_20009C:; CODE XREF: start:loc_200099j

LOAD:0020009Cpushebx; сохраняем ebx после ptrace

LOAD:0020009Dmovecx,offsetdword_200296; указатель на 4х байтовый буфер

LOAD:002000A2movedx, 4; сколько символов считать

LOAD:002000A7callloc_2002AA; считать с клавы 4 символа

LOAD:002000ACcallloc_2002C9; проверка пароля + CRC

LOAD:002000B1xorebx, dword_200296; анализ результатов проверки

LOAD:002000B7jzshortloc_2000CC; -> пароль и CRC подлинные

LOAD:002000B9

LOAD:002000B9 loc_2000B9:; CODE XREF: start+C7j

LOAD:002000B9movecx, offset aWrongPasswordS ;

LOAD:002000BEmovdl, 1Dh; пароль или CRC неверны

LOAD:002000C0callloc_20029A; вывод ругательства на экран

LOAD:002000C5jmploc_20030C; -> завершение программы

LOAD:002000C5

LOAD:002000CAdb72h ;r; мусор

LOAD:002000CBdb36h ;6; мусор

LOAD:002000CC

LOAD:002000CC loc_2000CC:; CODE XREF: start+AFj

LOAD:002000CCpopebx; выталкиваем ebx после ptrace

LOAD:002000CDtestebx, ebx; был ли раньше обнаружен отладчик

**LOAD****:002000****CF********jnz********short****loc****_2000****B****9; -> отладчик был ранее обнаружен**

LOAD:002000D1movecx, offset aSuccessCongrat ;

LOAD:002000D6movedx, 68h; все проверки пройдены! все ок!

LOAD:002000DBcallloc_20029A; выводим поздравление на экран

LOAD:002000E0jmploc_20030C; -> победоносное завершение проги

LOAD:002000E0

LOAD:002000E5 aWrongPasswordS db 0Ah; DATA XREF: start:loc_2000B9o

LOAD:002000E5db ' Wrong password, sorry...',0Ah

LOAD:002000E5db 0Ah,0

LOAD:00200102 aSorryButThePro db 'Sorry but the process seems to be traced...',0Ah,0

LOAD:00200102; DATA XREF: start+80o

LOAD:00200136 aSuccessCongrat db '-> Success !! Congratulations...',0Ah

LOAD:00200136; DATA XREF: start+C9o

LOAD:00200136db '  -> You can send me yr solution/comments at the above mai'

LOAD:00200136db 'l addr...',0Ah,0

LOAD:0020019E unk_20019E db 0FAh ;·; DATA XREF: start+5Bo

Листинг 8 дизассемблированный листинг после расшифровки скриптом

Совсем другое дело! Наконец-то мы получили читабельный код, в конце которого просматриваются текстовые строки "Wrong password, sorry" и " Success !! Congratulations..." с перекрестными ссылками возле них. Перекрестная ссылка это то, что начинается с префикса "XREF" (crossreference). Это мощное оружие против защиты, ведущее прямо в сердце защитного механизма. В частности, чтобы увидеть какой код выводит сообщение о неправильном пароле достаточно перейти по перекрестной ссылке к строке "loc_2000B9". Суффикс "o" в конце обозначает "offset", то есть смещение. Это говорит о том, что данная строка адресуется по ее смещению, то есть мы имеем дело с указателем.

На самом деле, в окрестностях строки 2000B9h нет и не может быть ничего интересного. Тот код просто выводит сообщение "wrongpassword" на экран. Правосудие уже свершилось! Карающая рука Немезиды находится совсем в другом месте. В каком? Мы видим что рядом со строкой 2000B9h имеется еще одна перекрестная ссылка, ведущая к метке "start+C7j". Суффикс 'j' подразумевает jump, то есть прыжок. Это уже интереснее! Возможно, здесь-то и кроется тот самый заветный условный переход, который решает wrong'ли этот пароль или нет. Подводим курсор к перекрестной ссылке и нажимаем ENTER, IDA автоматически переносит нас на нужное место к строке 2000СFh. Что ж, все вполне логично, функция start расположена по адресу 200008h, а 200008h + C7h = 2000СFh.

LOAD:002000CCpopebx; CODE XREF: start:loc_200099↑j

LOAD:002000CDtestebx, ebx; проверка ebx на равенство нулю

**LOAD****:002000****CF********jnz********short****loc****_2000****B****9; -> прыжок если ****ebx**** не нуль**

LOAD:002000D1movecx,offsetaSuccssCngrt; ветка "правильного пароля"

Листинг 9 окрестности кода, в который нас привела цепочка перекрестных ссылок

Держите мой мыщъх'иный хвост ("я же сказал держите, а не дергайте, и вообще это не хвост" — сказал мыщъх и покраснел)!!! По этому адресу действительно находится условный переход, сравнивающий содержимое регистра EBX с нулем и если он неравен нулю, происходит переход на подпрограмму, выводящую сообщение "wrongpassword" на экран. В противном случае управление получает ветка, выводящая "Success !! Congratulations" (поздравляем вас с успехом).

А что если попробовать заменить JNZ на JZ? Тогда программа поедет крышей и раскурит косяк. Правильный пароль (которого мы все равно не знаем) она будет воспринимать как неправильный, посылая их в зад, а неправильные пароли встретит с дорогой душой и вот таким косяком. Нет, вооот таким! Вся проблема в том, что программа зашифрована и прежде чем патчить байты ее необходимо расшифровать. В принципе, это можно сделать и с помощью IDA Pro, но проще будет воспользоваться коммерческим HIEW'ом (Сусликова — на костер!) или бесплатным редактором HTE, который можно скачать с www.sourceforge.net/projects/hte.

Остановим свой выбор на последнем, хотя он, в отличии от HIEW'а не может редактировать ELF'ы с искаженным заголовком в режиме image (то есть все виртуальные адреса мы должны вычислять самостоятельно), но зато нам не придется платить.

Загружаем файл в редактор ("$./htetiny-crackme"), нажимаем <F6> (mode) или давим пробел, в появившемся диалоговом окне выбираем "elf/programheader" (просмотр программного заголовка, описывающего сегменты) и видим один-единственный сегмент "entry 0 (load)". Нажимаем <Enter>, чтобы просмотреть его атрибуты и видим, что он начинается с виртуального адреса 200000h, расположенного в файле по смещению 0h. Следовательно, виртуальный адрес 2000СFh (по которому расположен наш злополучный условный переход) соответствует смещению 0СFh

{{linux-tiny-crm_Image_5.png}}

Рисунок 6 просмотр атрибутов единственного сегмента

Переходим сюда (<F5>, 0CFh, <Enter>) и видим, что здесь находится байт 84h. Сейчас мы должны расшифровать его, исправить и зашифровать опять. Как это сделать? Вообще-то есть много путей и все они правильные. Самое простое, наложить XOR. Ведь ключ шифрования нам известен — 3F5479F1h. Но вот в чем вопрос — какая именно часть ключа накладывается на данный байт? В смысле каким из четырех байтов шифровать? Это нетрудно выяснить математически. Начало шифроблока располагается по адресу 200004Bh, так? Тогда наш байт совпадает с 2000CFh - 20004Bh % 4 байтом ключа. Чтобы вычислить значение этого выражения в HTE достаточно войти в Edit->Evaluate и ввести его в калькулятор. Получится ноль. Значит, байт 2000СFh шифруемся первым байтом ключа. На x86 платформе он располагается по меньшему адресу, то есть в младших разрядах числа и в данном случае равен F1h. Не выходя из калькулятора даем 84h ^ F1h и получаем 75h, что в точности соответствует опкоду инструкции JNZ. Как следует из руководства Intel, инструкции JZ в свою очередь соответствует опкод 74h. Набираем в калькуляторе 74h ^ F1h и получаем 85h. Это и будет зашифрованное значение опкода JZ. Нажимаем <F4> для активации режима редактирования, записываем на место 84h значение 85h и нажимаем <F2> чтобы сохранить правку на диск. Как видно, после хака изменился всего один бит и этим битом оказался младший бит числа: 85h (10000101)  84h (10000100). Это потому, что сами опкоды 74h (1110100) и 75h (1110101) различаются всего лишь младшим битом, а XOR – это битовая операция! Другими словами, //**если шифрование производится путем наложения **////**XOR**////**, то, чтобы превратить **////**JZ**////** в **////**JNZ**////** (или наоборот), **////**независимо от ключа шифрования (!)**////** достаточно инвертировать младший бит шифротекста!**// И не нужно возиться со всеми этими расчетами!!! Возьмите себе этот трюк на заметку. Нам он еще пригодится. Выходим из редактора и с замираем сердца запускам timy-crackme…. Увы! Он не запускается! То есть запускается, конечно, но отказывается принимать пароль. Почему?

Возвращаемся к строке 002000CFh (той самой, в которой мы исправили условный переход), и прокручиваем экран дизассемблера вверх до тех пор, пока не встретим следующую перекрестную ссылку start+AFj, ведущую к строке 2000ACh. Посмотрим, что у нас там?

LOAD:002000ACcallloc_2002C9; проверка пароля и своего CRC

LOAD:002000B1xorebx, dword_200296; анализ результатов

**LOAD:002000B7jzshort loc_2000CC; -> ****все****ок**

LOAD:002000B9

LOAD:002000B9 loc_2000B9:; CODE XREF: start+C7↓j

LOAD:002000B9movecx,offset aWrongPasswordS;"\n Wrong password, sorry..."

Листинг 10 мина с детонатором

Оторвать мой хвост! Еще одна проверка и еще один условный переход, расположенный по адресу 2000B7h. Как видно, он анализирует значение, возвращенное функцией loc_2002C9, сравнивая его с двойным словом dword_200296, и, если loc_2002C9()^dword_200296!=0, условный переход *не* выполняется и управление получает подпрограмма выводящая ругательное сообщение на экран. Что делает функция loc_2002C9? Да какая нам разница! Судя по всему, занимается проверкой целостности кода (которую нам обещал создатель крякмиса). Чтобы обезвредить ее мы должны заменить JZ на JNZ инвертировав младший бит байта, расположенного по адресу 2000B7h. Вычитая базовый виртуальный адрес сегмента, мы получим физическое смещение по которому этот байт располагается в ELF-файле (в нашем случае оно равно B7h), где находится байт 85h. Инвертируем младший бит, превращая его в 84h, сохраняем изменения, выходим из HTE, запускаем timy-crackme… Как это так опять не запускается?! Вот что значит хачить вслепую!

{{linux-tiny-crm_Image_6.png}}

Рисунок 7 "сквозная" правка зашифрованного кода в HTE без его расшифровки

Возвращаемся к нашему первому условному переходу 2000CFh (см. листинг 9) и пытаемся проанализировать что именно он проверяет. Мы видим, что с вершины стека стягивается двойное слово и проверяется на равенство нулю. А кто его туда положил?! Переходим по перекрестной ссылке наверх и видим, что в строке 20009Ch на вершину стека забрасывается содержимое регистра EBX.

LOAD:0020009C loc_20009C:; CODE XREF: start:loc_200099↑j

LOAD:0020009Cpushebx; сохранить ebx в стеке

Листинг 11 что за бикфордов шнур?!

А чему равен сам EBX? Ответ дает очередная перекрестная ссылка ведущая нас к следующему коду:

LOAD:0020007Bmovedx, 1

**LOAD:00200080int80h; LINUX - sys_ptrace**

LOAD:00200082subebx, eax; анализ возвращенного значения

LOAD:00200084testeax, eax; отладчик обнаружен?

LOAD:00200086jzshortloc_200099; -> отладчика нет, все чисто

Листинг 12 то был бикфордов шнур, а это динамит

Вот оно! Системный вызов sys_ptrace! Оказывается, что наш условный переход в строке 2000CFh проверял совсем не пароль, а… наличие отладчика (программа которая уже отлаживается не может вызывать ptrace, сказанное, разумеется, распространяется только на те отладчики, что работают через ptrace). Но это не совсем так. Точнее, совсем не так. Как только отладчик напарывается на условный переход 200086h, на экран выводится разочаровывающее сообщение "Sorry but the process seems to be trace" ("извините, но процесс похоже трассируется") и до "нашего" условного перехода 2000CFh дело просто не доходит!

На самом деле, создатель кряксима применил довольно хитрый трюк. Условный переход 2000CFh не контролирует ни правильность пароля, ни наличие отладчика. Он вставлен просто как приманка. Мина-ловушка. Кто пытается его хакнуть, тот взрывается.

Таким образом, //**чтобы взломать программу необходимо изменить всего один условный переход по адресу 2000B7**////**h**////**.**// Условный переход 2000CFh трогать не нужно! Поскольку мы уже тронули его, нам надлежит вернуть все на место, заменив ханутое 85h на 84h. Сохраняем изменения по <F2>, выходим из hex-редактора и… Неужели на этот раз сработает?!

{{linux-tiny-crm_Image_7.png}}

Рисунок 8 взлом завершен

Да! Это работает!!! Невероятно! У нас получилось! Программа воспринимает любые вводимые пароли как правильные, выводя победоносную надпись "Success!! Congratulations" наэкран! Открываем свежее пиво и отрываем у мыщъха хвост. Теперь мы будет работать только клавиатурой!

Все это долго описывать, но быстро ломать. Чтобы захачить программу мыщъх'у потребовалось чуть больше десяти минут да и те ушли в основном на тормоза виртуальной LINUX-машины под не самым быстрым P-III 733. В живой природе все происходит еще быстрее.

===== заключение =====

Вот мы и хакнули не самый простейший crackme под LINUX, продемонстрировав базовою технику взлома. Конечно, это грязный взлом, так же именуемый bit-hack'ом, и тут совершенно нечем гордится. Более аккуратные хакеры анализируют алгоритм проверки пароля и пишут кей-ген, генерирующий подходящий пароли/серийные номера. Это намного более сложная операция, которую трудно изложить в одной-единственной статье. Лучше сходите на мой ftp-сервер (nezumi.org.ru). Если мыщъх не спит и из его трубы идет дым, сервер стоит на раздаче всяких интересных материалов.

Но все-таки вернемся к кей-генам. Вот пара готовых решений, которые стоит почитать начинающим (но только после того, как вы напишите своей собственный key-gen). Вот: www.crackmes.de/users/yanisto/tiny_crackme/solutions/tiocsti и вот www.crackmes.de/users/yanisto/tiny_crackme/solutions/krio.

Кстати, вот несколько подходящих паролей: b00m, v2Do, f64k. По идее, после взлома программа должна воспринимать их как неправильные (мы же ведь инвертировали условный переход), но… "вопреки усилиям врачей", она к ним вполне благосклонна. Вот так головоломка! Но на самом деле все проще простого. Создатель крякмиса совместил в одном переходе контроль целостности кода с проверкой валидности пароля. Поскольку, после хака целостность кода была нарушена, инвертированный условный переход срабатывает *всегда* независимо от того какой пароль был введен. Вообще говоря, tiny-crackme содержит довольно много секретов… Поковыряйте его на досуге. Получите массу удовольствия.

{{linux-tiny-crm_Image_8.jpg}}

Рисунок 9 взломай меня!


